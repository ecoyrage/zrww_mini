<style lang="less">
.login{
  display: flex;
  align-items: center;
  justify-content: center; 
  width: 670rpx;
  height: 100rpx;
  line-height: 20px;
  border-radius: 5px;
  color: #ffffff;
  font-size: 32rpx;
}
.zrww{
  margin-top: 40rpx;
  color: #333333;
  font-size: 24px;
  font-weight: bold;
}

.login-wechat{
  margin-top:72rpx;
  background-color: #5383c3;
  color: #ffffff;
}
.login-phone{
  margin-top:62rpx;
  background-color: #f6f6f6;
  color: #5383c3;
}
.trety{
  margin-top:656rpx;
  margin-bottom:96rpx;
  color: #878787;
  font-size: 12px;
}
.href{
   color: #5383c3;
}
.wxLogin{
 width: 48rpx;
 height: 48rpx;
 position:absolute;
 z-index: 99;
 margin-top:35rpx;
 margin-left:-140rpx;
}

</style>
<template>
  <view>
    <view class="section">
      <text class="zrww">找人问问，登录</text>
    </view>
    <view class="section">
      <image class="wxLogin" src="../../files/img/login/wechat_white.png"></image>
      <button class="login login-wechat" open-type="getUserInfo"  @getuserinfo="getUserInfo">微信登录/注册</button>
    </view>
    <view class="section">
      <button class="login login-phone" @tap="phone_login()">手机验证码登录</button>
    </view>
    <view class="section">
      <text class="trety">登录即代表你同意</text><text class="trety href" @tap="userAgreement()">《用户协议》</text><text class="trety">和</text><text class="trety href" @tap="privacyProtection()">《隐私保护》</text>
    </view>
     <toast />
  </view>
</template>

<script>
  import wepy from 'wepy'
  import Toast from 'wepy-com-toast'
  import utils from "@/mixins/utils";
  export default class login extends wepy.page {
    config = {
      navigationBarTitleText: ''
    }
    components = {
      toast: Toast
    }


    data = {
      isGetUserLocation:false,
    }
    
    mixins=[utils]

    methods = {
      userAgreement(){
        wx.downloadFile({
          url: 'https://wz-public-read.oss-cn-hangzhou.aliyuncs.com/zhaorenwenwenUserRule.doc', // 仅为示例，并非真实的资源
            success: function(res) {
              var filePath = res.tempFilePath;
              wx.openDocument({
                  filePath: filePath,
                  fileType: 'doc',
              })
          }
        })
      },
      privacyProtection(){
        wepy.navigateTo({
            url:'/pages/out/privacyProtection?html='+'https://wz-public-read.oss-cn-hangzhou.aliyuncs.com/ww_privacy-protocol.html'
          })
      },
      phone_login(){
        let self=this;
        self.getUserLocation();
        if(self.isGetUserLocation){
          self.getAdCode();
          wepy.navigateTo({
            url:'/pages/login/login_phone?title=手机验证码登录&submit=登录&type=1'
          })
        }
      }
    }

    getUserLocation(){
      let self=this;
      wx.getSetting({
            success(res) {
              if (!res.authSetting['scope.userLocation']) {
                wx.showModal({
                    title: '是否授权当前位置',
                    content: '需要获取您的地理位置，请确认授权，否则功能将无法使用',
                    success: function (tip) {
                        if (tip.confirm) {
                            wx.openSetting({
                                success: function (data) {
                                    if (data.authSetting["scope.userLocation"] === true) {
                                        wx.showToast({
                                            title: '授权成功',
                                            icon: 'success',
                                            duration: 1000
                                        })
                                        self.isGetUserLocation = true;
                                        self.$apply();
                                    } else {
                                        wx.showToast({
                                            title: '授权失败',
                                            icon: 'none',
                                            duration: 1000
                                        })
                                    }
                                }
                            })
                        }
                    }
                })
              }else{
                self.isGetUserLocation = true;
                self.$apply();
              }
            }
        })
    }
    async getUserInfo(e){
      let self=this;
      let userInfo=e.detail.userInfo;
      if(userInfo==undefined){
         wepy.showToast({
          title: '授权之后才能登录',
          icon: 'none',
          duration: 3000
        })
      }else{
      
        self.getUserLocation();
        if(self.isGetUserLocation){
          self.$parent.globalData.userInfo=userInfo;
          self.$parent.globalData.isLogin=true;
          let unionId= await self.getUnionId(e.detail.encryptedData,e.detail.iv);
          self.$parent.globalData.unionId=unionId;
          self.$apply();
          let firstReg= await self.oauthLogin(unionId,userInfo);
          wx.showToast({
              title: '登录中',
              icon: 'loading',
              duration: 3000,
              mask:true
          })
          if(firstReg==-1){
              wepy.navigateTo({
                url:'/pages/login/login_phone?title=绑定手机号&submit=确认&type=2'
              })
          }else if(firstReg==0){
              self.getAdCode();
              self.getBascicInfo();
          }else if(firstReg==1){
            wepy.navigateTo({
                url:'/pages/login/invitation_code'
            })

          }
        }
      }
    }

    getUnionId(encryptedData,iv){
      let self=this;
      return new Promise((resolve, reject) => {
        //  resolve('ogp_70sFqo7c9uiShhgg77RhrvgI')
        wepy.login({
              success(res){
                let json={};
                json.code=res.code;
                json.encryptedData=encryptedData;
                json.iv=iv;
                let obj=self.genObj(json);
                let sign=self.genSign(obj);
                wepy.request({
                  url: self.domain+'/ww/api/v1/common/code2Session',
                  method: 'post',
                  data: {object:obj,sign:sign},
                  header:{
                    'JWT': 'true',
                    'content-type':'application/json',
                  },
                  success: function (data) {
                    if(data.data.code==100){
                      resolve(data.data.data);
                    }else{
                      console.log("登录 、 解密unidode失败");
                      console.log(data.data.msg);
                      wepy.showToast({
                        title: '请求失败！请重试',
                        icon: 'none',
                        duration: 3000
                      })
                    }
                  }
                });
              }
        });
      })
    }
    oauthLogin(unionId,userInfo){
      let self=this;
      return new Promise((resolve, reject) => {
          let json={};
          json.unionid=unionId;
          json.nickName=userInfo.nickName
          json.gender=userInfo.gender
          json.avatarUrl=userInfo.avatarUrl
          json.loginInfo="小程序";
          let obj=self.genObj(json);
          let sign=self.genSign(obj);
          wepy.request({
            url:  self.domain+'/ww/api/v1/common/oauthLogin',
            method: 'post',
            data: {object:obj,sign:sign},
            header:{
              'JWT': 'true',
              'content-type':'application/json',
            },
            success: res => {
              if(res.data.code==401){
                resolve(-1);
              }else if(res.data.code==100){
                let data=res.data.data;
                let accessToken= data.accessToken;
                let randomKey=data.randomKey;
                self.accessToken=accessToken;
                self.randomKey=randomKey;
                wx.setStorageSync('accessToken',accessToken);
                wx.setStorageSync('randomKey',randomKey);
                wx.setStorageSync('isLogin', true);
                resolve(data.firstReg)
              }
            }
       })
        
      })
    }


 
    events = {
      // 'index-emit': (...args) => {
      //   let $event = args[args.length - 1]
      //   console.log(`${this.$name} receive ${$event.name} from ${$event.source.$name}`)
      // }
    }

    onLoad(options) {
      let self = this
      self.getAdCode();
    }
  }
</script>
